from flask import request, jsonify
from models import User, Cat
from flask_restx import fields, Resource, app
from werkzeug.security import generate_password_hash, check_password_hash
from flask_jwt_extended import create_access_token, create_refresh_token
from flask_app import create_app
from config import DevConfig
app = create_app(DevConfig)


@app.route('/hello')
class HelloResource(Resource):
    def get(self):
        return {"Message": "Hello world!"}
    
@app.route('/signup')
class SignUp(Resource):
    @app.expect(signUp_model)
    def post(self):
        signuser = request.get_json()
        username=signuser.get('username')

        db_user = User.query.filter_by(username=username).first()
        if db_user is not None:
            return jsonify({
                "message": f"'{username}' already exists. try another"
            })
        new_user = User(
            username=signuser.get('username'),
            email=signuser.get('email'),
            password=generate_password_hash(signuser.get('password'))
            )
        
        new_user.save()
        return jsonify({"success": f"a user '{username}' is created successfully"})
            


@app.route('/login')
class Login(Resource):
    def post(self):
        data = request.get_json()
        username = data.get('username')
        db_user = User.query.filter_by(username=username).first()
        if db_user and check_password_hash(db_user.password, data.get('password')):
            return jsonify({
                "access_tokren": create_access_token(identity=username),
                "refresh_token": create_refresh_token(identity=username)})


cat_model = app.model(
    "Cat",
    {
        "id": fields.Integer(),
        "image": fields.String(),
        "title": fields.String(),
        "description": fields.String(),
        "new_price": fields.Float(),
        "old_price": fields.Float(),
        "added_at": fields.DateTime    
    }
)


    
@app.route('/cats')
class CatResource(Resource):
    @app.marshal_list_with(cat_model)
    def get(self):
        """
        Get all cats in the list
        """
        cats = Cat.query.all()
        return cats

    @app.marshal_with(cat_model)
    def post(self):
        """Create new cat input"""
        cat = request.get_json()
        new_cat = Cat(
            image=cat.get('image'),
            title=cat.get('title'),
            description=cat.get('description'),
            new_price=cat.get('new_price'),
            old_price=cat.get('old_price')
        )
        new_cat.save()
        return new_cat, 201


@app.route('/cat/<int:id>')
class CatResource(Resource):
    @app.marshal_with(cat_model)
    def get(self,id):
        """
        Get a recipe by id
        """
        cat = Cat.query.get_or_404(id)
        return cat
    

    @app.marshal_with(cat_model)
    def put(self, id):
        cat_to_update = Cat.query.get_or_404(id)
        cat = request.get_json()
        cat_to_update.update(
            cat.get('image'),
            cat.get('title'),
            cat.get('description'),
            cat.get('new_price'),
            cat.get('old_price')
        )
        return cat_to_update
    
    @app.marshal_with(cat_model)
    def delete(self, id):
        cat_to_delete = Cat.query.get_or_404(id)
        cat_to_delete.delete()
        return cat_to_delete       
    

if __name__ == "__main__":
    app.run()